{"version":3,"file":"static/chunks/390-31a8d8f79265d1aa.js","mappings":"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","sources":["webpack://_N_E/./node_modules/.pnpm/extend@3.0.2/node_modules/extend/index.js","webpack://_N_E/./node_modules/.pnpm/inline-style-parser@0.1.1/node_modules/inline-style-parser/index.js","webpack://_N_E/./node_modules/.pnpm/is-buffer@2.0.5/node_modules/is-buffer/index.js","webpack://_N_E/./node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/factoryWithThrowingShims.js","webpack://_N_E/./node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/index.js","webpack://_N_E/./node_modules/.pnpm/prop-types@15.8.1/node_modules/prop-types/lib/ReactPropTypesSecret.js","webpack://_N_E/./node_modules/.pnpm/react-is@18.2.0/node_modules/react-is/cjs/react-is.production.min.js","webpack://_N_E/./node_modules/.pnpm/react-is@18.2.0/node_modules/react-is/index.js","webpack://_N_E/./node_modules/.pnpm/react-syntax-highlighter@15.5.0_react@18.2.0/node_modules/react-syntax-highlighter/dist/cjs/languages/prism/bash.js","webpack://_N_E/./node_modules/.pnpm/react-syntax-highlighter@15.5.0_react@18.2.0/node_modules/react-syntax-highlighter/dist/cjs/languages/prism/json.js","webpack://_N_E/./node_modules/.pnpm/react-syntax-highlighter@15.5.0_react@18.2.0/node_modules/react-syntax-highlighter/dist/cjs/languages/prism/markdown.js","webpack://_N_E/./node_modules/.pnpm/react-syntax-highlighter@15.5.0_react@18.2.0/node_modules/react-syntax-highlighter/dist/cjs/languages/prism/scss.js","webpack://_N_E/./node_modules/.pnpm/react-syntax-highlighter@15.5.0_react@18.2.0/node_modules/react-syntax-highlighter/dist/cjs/languages/prism/tsx.js","webpack://_N_E/./node_modules/.pnpm/react-syntax-highlighter@15.5.0_react@18.2.0/node_modules/react-syntax-highlighter/dist/cjs/languages/prism/typescript.js","webpack://_N_E/./node_modules/.pnpm/react-syntax-highlighter@15.5.0_react@18.2.0/node_modules/react-syntax-highlighter/dist/esm/prism-light.js","webpack://_N_E/./node_modules/.pnpm/style-to-object@0.4.1/node_modules/style-to-object/index.js","webpack://_N_E/./node_modules/.pnpm/unist-util-stringify-position@3.0.3/node_modules/unist-util-stringify-position/lib/index.js","webpack://_N_E/./node_modules/.pnpm/vfile-message@3.1.4/node_modules/vfile-message/lib/index.js","webpack://_N_E/./node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/lib/minpath.browser.js","webpack://_N_E/./node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/lib/minproc.browser.js","webpack://_N_E/./node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/lib/minurl.shared.js","webpack://_N_E/./node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/lib/minurl.browser.js","webpack://_N_E/./node_modules/.pnpm/vfile@5.3.7/node_modules/vfile/lib/index.js","webpack://_N_E/./node_modules/.pnpm/bail@2.0.2/node_modules/bail/index.js","webpack://_N_E/./node_modules/.pnpm/is-plain-obj@4.1.0/node_modules/is-plain-obj/index.js","webpack://_N_E/./node_modules/.pnpm/trough@2.1.0/node_modules/trough/index.js","webpack://_N_E/./node_modules/.pnpm/unified@10.1.2/node_modules/unified/lib/index.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-string@3.2.0/node_modules/mdast-util-to-string/lib/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-util-chunked@1.1.0/node_modules/micromark-util-chunked/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-util-combine-extensions@1.1.0/node_modules/micromark-util-combine-extensions/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-util-character@1.2.0/node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","webpack://_N_E/./node_modules/.pnpm/micromark-util-character@1.2.0/node_modules/micromark-util-character/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-factory-space@1.1.0/node_modules/micromark-factory-space/index.js","webpack://_N_E/./node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/initialize/content.js","webpack://_N_E/./node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/initialize/document.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://_N_E/./node_modules/.pnpm/micromark-util-subtokenize@1.1.0/node_modules/micromark-util-subtokenize/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/content.js","webpack://_N_E/./node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/initialize/flow.js","webpack://_N_E/./node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/initialize/text.js","webpack://_N_E/./node_modules/.pnpm/micromark-util-resolve-all@1.1.0/node_modules/micromark-util-resolve-all/index.js","webpack://_N_E/./node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/create-tokenizer.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/list.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/block-quote.js","webpack://_N_E/./node_modules/.pnpm/micromark-factory-destination@1.1.0/node_modules/micromark-factory-destination/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-factory-label@1.1.0/node_modules/micromark-factory-label/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-factory-title@1.1.0/node_modules/micromark-factory-title/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-factory-whitespace@1.1.0/node_modules/micromark-factory-whitespace/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-util-normalize-identifier@1.1.0/node_modules/micromark-util-normalize-identifier/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/definition.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/code-indented.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack://_N_E/./node_modules/.pnpm/micromark-util-html-tag-name@1.2.0/node_modules/micromark-util-html-tag-name/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/html-flow.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack://_N_E/./node_modules/.pnpm/decode-named-character-reference@1.0.2/node_modules/decode-named-character-reference/index.dom.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/character-reference.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/character-escape.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/line-ending.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/label-end.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack://_N_E/./node_modules/.pnpm/micromark-util-classify-character@1.1.0/node_modules/micromark-util-classify-character/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/attention.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/autolink.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/html-text.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack://_N_E/./node_modules/.pnpm/micromark-core-commonmark@1.1.0/node_modules/micromark-core-commonmark/lib/code-text.js","webpack://_N_E/./node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/constructs.js","webpack://_N_E/./node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/parse.js","webpack://_N_E/./node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/preprocess.js","webpack://_N_E/./node_modules/.pnpm/micromark@3.2.0/node_modules/micromark/lib/postprocess.js","webpack://_N_E/./node_modules/.pnpm/micromark-util-decode-numeric-character-reference@1.1.0/node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-util-decode-string@1.1.0/node_modules/micromark-util-decode-string/index.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-from-markdown@1.3.1/node_modules/mdast-util-from-markdown/lib/index.js","webpack://_N_E/./node_modules/.pnpm/remark-parse@10.0.2/node_modules/remark-parse/lib/index.js","webpack://_N_E/./node_modules/.pnpm/micromark-util-sanitize-uri@1.2.0/node_modules/micromark-util-sanitize-uri/index.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/footer.js","webpack://_N_E/./node_modules/.pnpm/unist-util-is@5.2.1/node_modules/unist-util-is/lib/index.js","webpack://_N_E/./node_modules/.pnpm/unist-util-visit-parents@5.1.3/node_modules/unist-util-visit-parents/lib/color.browser.js","webpack://_N_E/./node_modules/.pnpm/unist-util-visit-parents@5.1.3/node_modules/unist-util-visit-parents/lib/index.js","webpack://_N_E/./node_modules/.pnpm/unist-util-visit@4.1.2/node_modules/unist-util-visit/lib/index.js","webpack://_N_E/./node_modules/.pnpm/unist-util-position@4.0.4/node_modules/unist-util-position/lib/index.js","webpack://_N_E/./node_modules/.pnpm/unist-util-generated@2.0.1/node_modules/unist-util-generated/lib/index.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-definitions@5.1.2/node_modules/mdast-util-definitions/lib/index.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/break.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/code.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/delete.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/footnote.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/heading.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/html.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/revert.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/image.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/link.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/list-item.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/list.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/root.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/strong.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/table.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/table-row.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","webpack://_N_E/./node_modules/.pnpm/trim-lines@3.0.1/node_modules/trim-lines/index.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/text.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/handlers/index.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/state.js","webpack://_N_E/./node_modules/.pnpm/mdast-util-to-hast@12.3.0/node_modules/mdast-util-to-hast/lib/index.js","webpack://_N_E/./node_modules/.pnpm/remark-rehype@10.1.0/node_modules/remark-rehype/lib/index.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/util/schema.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/util/merge.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/normalize.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/util/info.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/util/types.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/util/defined-info.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/util/create.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/xlink.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/xml.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/xmlns.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/aria.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/html.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/svg.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/index.js","webpack://_N_E/./node_modules/.pnpm/react-markdown@8.0.7_@types+react@18.2.14_react@18.2.0/node_modules/react-markdown/lib/rehype-filter.js","webpack://_N_E/./node_modules/.pnpm/hast-util-whitespace@2.0.1/node_modules/hast-util-whitespace/index.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/find.js","webpack://_N_E/./node_modules/.pnpm/property-information@6.2.0/node_modules/property-information/lib/hast-to-react.js","webpack://_N_E/./node_modules/.pnpm/space-separated-tokens@2.0.2/node_modules/space-separated-tokens/index.js","webpack://_N_E/./node_modules/.pnpm/comma-separated-tokens@2.0.3/node_modules/comma-separated-tokens/index.js","webpack://_N_E/./node_modules/.pnpm/style-to-object@0.4.1/node_modules/style-to-object/index.mjs","webpack://_N_E/./node_modules/.pnpm/react-markdown@8.0.7_@types+react@18.2.14_react@18.2.0/node_modules/react-markdown/lib/uri-transformer.js","webpack://_N_E/./node_modules/.pnpm/react-markdown@8.0.7_@types+react@18.2.14_react@18.2.0/node_modules/react-markdown/lib/ast-to-react.js","webpack://_N_E/./node_modules/.pnpm/react-markdown@8.0.7_@types+react@18.2.14_react@18.2.0/node_modules/react-markdown/lib/react-markdown.js","webpack://_N_E/<anon>"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","/**\n * @license React\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var b=Symbol.for(\"react.element\"),c=Symbol.for(\"react.portal\"),d=Symbol.for(\"react.fragment\"),e=Symbol.for(\"react.strict_mode\"),f=Symbol.for(\"react.profiler\"),g=Symbol.for(\"react.provider\"),h=Symbol.for(\"react.context\"),k=Symbol.for(\"react.server_context\"),l=Symbol.for(\"react.forward_ref\"),m=Symbol.for(\"react.suspense\"),n=Symbol.for(\"react.suspense_list\"),p=Symbol.for(\"react.memo\"),q=Symbol.for(\"react.lazy\"),t=Symbol.for(\"react.offscreen\"),u;u=Symbol.for(\"react.module.reference\");\nfunction v(a){if(\"object\"===typeof a&&null!==a){var r=a.$$typeof;switch(r){case b:switch(a=a.type,a){case d:case f:case e:case m:case n:return a;default:switch(a=a&&a.$$typeof,a){case k:case h:case l:case q:case p:case g:return a;default:return r}}case c:return r}}}exports.ContextConsumer=h;exports.ContextProvider=g;exports.Element=b;exports.ForwardRef=l;exports.Fragment=d;exports.Lazy=q;exports.Memo=p;exports.Portal=c;exports.Profiler=f;exports.StrictMode=e;exports.Suspense=m;\nexports.SuspenseList=n;exports.isAsyncMode=function(){return!1};exports.isConcurrentMode=function(){return!1};exports.isContextConsumer=function(a){return v(a)===h};exports.isContextProvider=function(a){return v(a)===g};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===b};exports.isForwardRef=function(a){return v(a)===l};exports.isFragment=function(a){return v(a)===d};exports.isLazy=function(a){return v(a)===q};exports.isMemo=function(a){return v(a)===p};\nexports.isPortal=function(a){return v(a)===c};exports.isProfiler=function(a){return v(a)===f};exports.isStrictMode=function(a){return v(a)===e};exports.isSuspense=function(a){return v(a)===m};exports.isSuspenseList=function(a){return v(a)===n};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===d||a===f||a===e||a===m||a===n||a===t||\"object\"===typeof a&&null!==a&&(a.$$typeof===q||a.$$typeof===p||a.$$typeof===g||a.$$typeof===h||a.$$typeof===l||a.$$typeof===u||void 0!==a.getModuleId)?!0:!1};exports.typeOf=v;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _bash = _interopRequireDefault(require(\"refractor/lang/bash.js\"));\n\n;\nvar _default = _bash[\"default\"];\nexports[\"default\"] = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _json = _interopRequireDefault(require(\"refractor/lang/json.js\"));\n\n;\nvar _default = _json[\"default\"];\nexports[\"default\"] = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _markdown = _interopRequireDefault(require(\"refractor/lang/markdown.js\"));\n\n;\nvar _default = _markdown[\"default\"];\nexports[\"default\"] = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _scss = _interopRequireDefault(require(\"refractor/lang/scss.js\"));\n\n;\nvar _default = _scss[\"default\"];\nexports[\"default\"] = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _tsx = _interopRequireDefault(require(\"refractor/lang/tsx.js\"));\n\n;\nvar _default = _tsx[\"default\"];\nexports[\"default\"] = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _typescript = _interopRequireDefault(require(\"refractor/lang/typescript.js\"));\n\n;\nvar _default = _typescript[\"default\"];\nexports[\"default\"] = _default;","import highlight from './highlight';\nimport refractor from 'refractor/core';\nvar SyntaxHighlighter = highlight(refractor, {});\n\nSyntaxHighlighter.registerLanguage = function (_, language) {\n  return refractor.register(language);\n};\n\nSyntaxHighlighter.alias = function (name, aliases) {\n  return refractor.alias(name, aliases);\n};\n\nexport default SyntaxHighlighter;","var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\nmodule.exports.default = StyleToObject; // ESM support\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?] | void[], string, Root>}\n */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n  if (!protocol) {\n    return value\n  }\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\nexport function footer(state) {\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let index = -1\n\n  while (++index < state.footnoteOrder.length) {\n    const def = state.footnoteById[state.footnoteOrder[index]]\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= state.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            state.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: state.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: state.clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: state.footnoteLabelTagName,\n        properties: {\n          // To do: use structured clone.\n          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: state.footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @param {string} d\n * @returns {string}\n */\nexport function color(d) {\n  return d\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {PositionLike | null | undefined} [position]\n */\n\n/**\n * Check if `node` is generated.\n *\n * @param {NodeLike | null | undefined} [node]\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is generated (does not have positional info).\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(tree, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier)\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang ? node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null\n  /** @type {Properties} */\n  const properties = {}\n\n  if (lang) {\n    properties.className = ['language-' + lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    state.footnoteOrder.push(id)\n    state.footnoteCounts[id] = 1\n    counter = state.footnoteOrder.length\n  } else {\n    state.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = state.footnoteCounts[id]\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id:\n        state.clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return {type: 'text', value: '![' + node.alt + suffix}\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastRoot | HastElement}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start.line && end.line) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(node, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastText | HastElement}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} MdastRoot\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n * @typedef {Extract<MdastNodes, MdastParent>} MdastParents\n *\n * @typedef EmbeddedHastFields\n *   hast fields.\n * @property {string | null | undefined} [hName]\n *   Generate a specific element with this tag name instead.\n * @property {HastProperties | null | undefined} [hProperties]\n *   Generate an element with these properties instead.\n * @property {Array<HastElementContent> | null | undefined} [hChildren]\n *   Generate an element with this content instead.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData\n *   mdast data with embedded hast fields.\n *\n * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData\n *   mdast node with embedded hast data.\n *\n * @typedef PointLike\n *   Point-like value.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @typedef PositionLike\n *   Position-like value.\n * @property {PointLike | null | undefined} [start]\n *   Point-like value.\n * @property {PointLike | null | undefined} [end]\n *   Point-like value.\n *\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | null | undefined} parent\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n *   Signature of `state` for when props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {HastProperties} props\n *   Properties.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n *   Signature of `state` for when no props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @typedef HFields\n *   Info on `state`.\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {HastProperties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use from backreferences back to their footnote call.\n * @property {(identifier: string) => MdastDefinition | null} definition\n *   Definition cache.\n * @property {Record<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Record<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(from: MdastNodes, node: HastNodes) => void} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one\n *   Transform an mdast node to hast.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment\n *   Like `state` but lower-level and usable on non-elements.\n *   Deprecated: use `patch` and `applyData`.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent it from\n *   *clobbering*.\n * @property {string | null | undefined} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call (affects\n *   screen readers).\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section (affects screen readers).\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (note that `id: 'footnote-label'`\n *   is always added as footnote calls use it with `aria-describedby` to\n *   provide an accessible label).\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   Tag name to use for the footnote label.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes.\n * @property {Array<string> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Handle nodes.\n *\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} State\n *   Info passed around.\n */\n\nimport {visit} from 'unist-util-visit'\nimport {position, pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, MdastFootnoteDefinition>} */\n  const footnoteById = {}\n\n  // To do: next major: add `options` to state, remove:\n  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,\n  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,\n  // `unknownHandler`.\n\n  // To do: next major: move to `state.options.allowDangerousHtml`.\n  state.dangerous = dangerous\n  // To do: next major: move to `state.options`.\n  state.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  // To do: next major: move to `state.options`.\n  state.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  // To do: next major: move to `state.options`.\n  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  // To do: next major: move to `state.options`.\n  state.unknownHandler = settings.unknownHandler\n  // To do: next major: move to `state.options`.\n  state.passThrough = settings.passThrough\n\n  state.handlers = {...handlers, ...settings.handlers}\n\n  // To do: next major: replace utility with `definitionById` object, so we\n  // only walk once (as we need footnotes too).\n  state.definition = definitions(tree)\n  state.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  state.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  state.footnoteCounts = {}\n\n  state.patch = patch\n  state.applyData = applyData\n  state.one = oneBound\n  state.all = allBound\n  state.wrap = wrap\n  // To do: next major: remove `augment`.\n  state.augment = augment\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return state\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {MdastNodeWithData | PositionLike | null | undefined} left\n   * @param {HastElementContent} right\n   * @returns {HastElementContent}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {MdastData} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function state(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | null | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n   *   Resulting hast node.\n   */\n  function oneBound(node, parent) {\n    // @ts-expect-error: that’s a state :)\n    return one(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function allBound(parent) {\n    // @ts-expect-error: that’s a state :)\n    return all(state, parent)\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {Type | HastElement}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {Type | HastElement} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent is likely to keep the content around (otherwise: pass\n      // `hChildren`).\n      else {\n        result = {\n          type: 'element',\n          tagName: hName,\n          properties: {},\n          children: []\n        }\n\n        // To do: next major: take the children from the `root`, or inject the\n        // raw/text/comment or so into the element?\n        // if ('children' in node) {\n        //   // @ts-expect-error: assume `children` are allowed in elements.\n        //   result.children = node.children\n        // } else {\n        //   // @ts-expect-error: assume `node` is allowed in elements.\n        //   result.children.push(node)\n        // }\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      result.properties = {...result.properties, ...hProperties}\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      // @ts-expect-error: assume valid children are defined.\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an mdast node into a hast node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   mdast node.\n * @param {MdastParents | null | undefined} [parent]\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   Resulting hast node.\n */\n// To do: next major: do not expose, keep bound.\nexport function one(state, node, parent) {\n  const type = node && node.type\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(state.handlers, type)) {\n    return state.handlers[type](state, node, parent)\n  }\n\n  if (state.passThrough && state.passThrough.includes(type)) {\n    // To do: next major: deep clone.\n    // @ts-expect-error: types of passed through nodes are expected to be added manually.\n    return 'children' in node ? {...node, children: all(state, node)} : node\n  }\n\n  if (state.unknownHandler) {\n    return state.unknownHandler(state, node, parent)\n  }\n\n  return defaultUnknownHandler(state, node)\n}\n\n/**\n * Transform the children of an mdast node into hast nodes.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} parent\n *   mdast node to compile\n * @returns {Array<HastElementContent>}\n *   Resulting hast nodes.\n */\n// To do: next major: do not expose, keep bound.\nexport function all(state, parent) {\n  /** @type {Array<HastElementContent>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n    while (++index < nodes.length) {\n      const result = one(state, nodes[index], parent)\n\n      // To do: see if we van clean this? Can we merge texts?\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastText | HastElement}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastText | HastElement} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: all(state, node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | null | undefined} [loose=false]\n *   Whether to add line endings at start and end.\n * @returns {Array<Type | HastText>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Type | HastText>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Root} MdastRoot\n *\n * @typedef {import('./state.js').Options} Options\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n */\n\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HastNodes | null | undefined}\n *   hast tree.\n */\n// To do: next major: always return a single `root`.\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, null)\n  const foot = footer(state)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  // To do: next major: always return root?\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","import {visit} from 'unist-util-visit'\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\nexport default function rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError(\n      'Only one of `allowedElements` and `disallowedElements` should be defined'\n    )\n  }\n\n  if (\n    options.allowedElements ||\n    options.disallowedElements ||\n    options.allowElement\n  ) {\n    return (tree) => {\n      visit(tree, 'element', (node, index, parent_) => {\n        const parent = /** @type {Element|Root} */ (parent_)\n        /** @type {boolean|undefined} */\n        let remove\n\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName)\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName)\n        }\n\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent)\n        }\n\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            parent.children.splice(index, 1, ...node.children)\n          } else {\n            parent.children.splice(index, 1)\n          }\n\n          return index\n        }\n\n        return undefined\n      })\n    }\n  }\n}\n","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","import StyleToObject from './index.js';\n\nexport default StyleToObject;\n","const protocols = ['http', 'https', 'mailto', 'tel']\n\n/**\n * @param {string} uri\n * @returns {string}\n */\nexport function uriTransformer(uri) {\n  const url = (uri || '').trim()\n  const first = url.charAt(0)\n\n  if (first === '#' || first === '/') {\n    return url\n  }\n\n  const colon = url.indexOf(':')\n  if (colon === -1) {\n    return url\n  }\n\n  let index = -1\n\n  while (++index < protocols.length) {\n    const protocol = protocols[index]\n\n    if (\n      colon === protocol.length &&\n      url.slice(0, protocol.length).toLowerCase() === protocol\n    ) {\n      return url\n    }\n  }\n\n  index = url.indexOf('?')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  index = url.indexOf('#')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  // eslint-disable-next-line no-script-url\n  return 'javascript:void(0)'\n}\n","/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template {import('react').ElementType} T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types.js').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'td'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: false}} TableDataCellProps\n * @typedef {ComponentPropsWithoutRef<'th'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: true}} TableHeaderCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableDataCellProps>} TableDataCellComponent\n * @typedef {ComponentType<TableHeaderCellProps>} TableHeaderCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableDataCellComponent|ReactMarkdownNames} td\n * @property {TableHeaderCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types.js').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\nimport React from 'react'\nimport ReactIs from 'react-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {svg, find, hastToReact} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport style from 'style-to-object'\nimport {uriTransformer} from './uri-transformer.js'\n\nconst own = {}.hasOwnProperty\n\n// The table-related elements that must not contain whitespace text according\n// to React.\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr'])\n\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\nexport function childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  const children = []\n  let childIndex = -1\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n  let child\n\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex]\n\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node))\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (\n        node.type !== 'element' ||\n        !tableElements.has(node.tagName) ||\n        !whitespace(child)\n      ) {\n        children.push(child.value)\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value)\n    }\n  }\n\n  return children\n}\n\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\nfunction toReact(context, node, index, parent) {\n  const options = context.options\n  const transform =\n    options.transformLinkUri === undefined\n      ? uriTransformer\n      : options.transformLinkUri\n  const parentSchema = context.schema\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n  const name = node.tagName\n  /** @type {Record<string, unknown>} */\n  const properties = {}\n  let schema = parentSchema\n  /** @type {string} */\n  let property\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = svg\n    context.schema = schema\n  }\n\n  if (node.properties) {\n    for (property in node.properties) {\n      if (own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context)\n      }\n    }\n  }\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++\n  }\n\n  const children = childrenToReact(context, node)\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--\n  }\n\n  // Restore parent schema.\n  context.schema = parentSchema\n\n  // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n  const position = node.position || {\n    start: {line: null, column: null, offset: null},\n    end: {line: null, column: null, offset: null}\n  }\n  const component =\n    options.components && own.call(options.components, name)\n      ? options.components[name]\n      : name\n  const basic = typeof component === 'string' || component === React.Fragment\n\n  if (!ReactIs.isValidElementType(component)) {\n    throw new TypeError(\n      `Component for name \\`${name}\\` not defined or is not renderable`\n    )\n  }\n\n  properties.key = index\n\n  if (name === 'a' && options.linkTarget) {\n    properties.target =\n      typeof options.linkTarget === 'function'\n        ? options.linkTarget(\n            String(properties.href || ''),\n            node.children,\n            typeof properties.title === 'string' ? properties.title : null\n          )\n        : options.linkTarget\n  }\n\n  if (name === 'a' && transform) {\n    properties.href = transform(\n      String(properties.href || ''),\n      node.children,\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (\n    !basic &&\n    name === 'code' &&\n    parent.type === 'element' &&\n    parent.tagName !== 'pre'\n  ) {\n    properties.inline = true\n  }\n\n  if (\n    !basic &&\n    (name === 'h1' ||\n      name === 'h2' ||\n      name === 'h3' ||\n      name === 'h4' ||\n      name === 'h5' ||\n      name === 'h6')\n  ) {\n    properties.level = Number.parseInt(name.charAt(1), 10)\n  }\n\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(\n      String(properties.src || ''),\n      String(properties.alt || ''),\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (!basic && name === 'li' && parent.type === 'element') {\n    const input = getInputElement(node)\n    properties.checked =\n      input && input.properties ? Boolean(input.properties.checked) : null\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.ordered = parent.tagName === 'ol'\n  }\n\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol'\n    properties.depth = context.listDepth\n  }\n\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {}\n      // @ts-expect-error assume `style` is an object\n      properties.style.textAlign = properties.align\n      delete properties.align\n    }\n\n    if (!basic) {\n      properties.isHeader = name === 'th'\n    }\n  }\n\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead')\n  }\n\n  // If `sourcePos` is given, pass source information (line/column info from markdown source).\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position)\n  }\n\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position\n  }\n\n  // If `includeElementIndex` is given, pass node index info to components.\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.siblingCount = getElementsBeforeCount(parent)\n  }\n\n  if (!basic) {\n    properties.node = node\n  }\n\n  // Ensure no React warnings are emitted for void elements w/ children.\n  return children.length > 0\n    ? React.createElement(component, properties, children)\n    : React.createElement(component, properties)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\nfunction getInputElement(node) {\n  let index = -1\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child\n    }\n  }\n\n  return null\n}\n\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\nfunction getElementsBeforeCount(parent, node) {\n  let index = -1\n  let count = 0\n\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break\n    if (parent.children[index].type === 'element') count++\n  }\n\n  return count\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\nfunction addProperty(props, prop, value, ctx) {\n  const info = find(ctx.schema, prop)\n  let result = value\n\n  // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n  if (result === null || result === undefined || result !== result) {\n    return\n  }\n\n  // Accept `array`.\n  // Most props are space-separated.\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? commas(result) : spaces(result)\n  }\n\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result)\n  }\n\n  if (info.space && info.property) {\n    props[\n      own.call(hastToReact, info.property)\n        ? hastToReact[info.property]\n        : info.property\n    ] = result\n  } else if (info.attribute) {\n    props[info.attribute] = result\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  const result = {}\n\n  try {\n    style(value, iterator)\n  } catch {\n    // Silent.\n  }\n\n  return result\n\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n  function iterator(name, v) {\n    const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v\n  }\n}\n\n/**\n * @param {unknown} _\n * @param {string} $1\n */\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\nfunction flattenPosition(pos) {\n  return [\n    pos.start.line,\n    ':',\n    pos.start.column,\n    '-',\n    pos.end.line,\n    ':',\n    pos.end.column\n  ]\n    .map(String)\n    .join('')\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n * @property {import('remark-rehype').Options | undefined} [remarkRehypeOptions={}]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\nimport React from 'react'\nimport {VFile} from 'vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport PropTypes from 'prop-types'\nimport {html} from 'property-information'\nimport rehypeFilter from './rehype-filter.js'\nimport {childrenToReact} from './ast-to-react.js'\n\nconst own = {}.hasOwnProperty\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {Record<string, Deprecation>} */\nconst deprecated = {\n  plugins: {to: 'remarkPlugins', id: 'change-plugins-to-remarkplugins'},\n  renderers: {to: 'components', id: 'change-renderers-to-components'},\n  astPlugins: {id: 'remove-buggy-html-in-markdown-parser'},\n  allowDangerousHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  escapeHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  source: {to: 'children', id: 'change-source-to-children'},\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n}\n\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\nexport function ReactMarkdown(options) {\n  for (const key in deprecated) {\n    if (own.call(deprecated, key) && own.call(options, key)) {\n      const deprecation = deprecated[key]\n      console.warn(\n        `[react-markdown] Warning: please ${\n          deprecation.to ? `use \\`${deprecation.to}\\` instead of` : 'remove'\n        } \\`${key}\\` (see <${changelog}#${deprecation.id}> for more info)`\n      )\n      delete deprecated[key]\n    }\n  }\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(options.remarkPlugins || [])\n    .use(remarkRehype, {\n      ...options.remarkRehypeOptions,\n      allowDangerousHtml: true\n    })\n    .use(options.rehypePlugins || [])\n    .use(rehypeFilter, options)\n\n  const file = new VFile()\n\n  if (typeof options.children === 'string') {\n    file.value = options.children\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(\n      `[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${options.children}\\`)`\n    )\n  }\n\n  const hastNode = processor.runSync(processor.parse(file), file)\n\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node')\n  }\n\n  /** @type {ReactElement} */\n  let result = React.createElement(\n    React.Fragment,\n    {},\n    childrenToReact({options, schema: html, listDepth: 0}, hastNode)\n  )\n\n  if (options.className) {\n    result = React.createElement('div', {className: options.className}, result)\n  }\n\n  return result\n}\n\nReactMarkdown.propTypes = {\n  // Core options:\n  children: PropTypes.string,\n  // Layout options:\n  className: PropTypes.string,\n  // Filter options:\n  allowElement: PropTypes.func,\n  allowedElements: PropTypes.arrayOf(PropTypes.string),\n  disallowedElements: PropTypes.arrayOf(PropTypes.string),\n  unwrapDisallowed: PropTypes.bool,\n  // Plugin options:\n  remarkPlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  rehypePlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  // Transform options:\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  includeElementIndex: PropTypes.bool,\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  components: PropTypes.object\n}\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","trim","str","replace","style","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","end","source","content","errorsList","error","msg","err","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","FORWARD_SLASH","charAt","ASTERISK","EMPTY_STRING","type","declarations","decl","decls","declaration","prop","val","ret","property","isBuffer","ReactPropTypesSecret","__webpack_require__","emptyFunction","emptyFunctionWithReset","resetWarningCache","shim","props","propName","componentName","location","propFullName","secret","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","u","b","Symbol","for","d","e","f","g","h","k","l","n","p","q","t","v","a","r","$$typeof","ContextConsumer","ContextProvider","Element","ForwardRef","Fragment","Lazy","Memo","Portal","Profiler","StrictMode","Suspense","SuspenseList","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isMemo","isPortal","isProfiler","isStrictMode","isSuspense","isSuspenseList","isValidElementType","getModuleId","typeOf","_interopRequireDefault","Z","_default","_bash","_json","_markdown","_scss","_tsx","_typescript","SyntaxHighlighter","_highlight__WEBPACK_IMPORTED_MODULE_1__","refractor_core__WEBPACK_IMPORTED_MODULE_0___default","registerLanguage","_","language","register","alias","aliases","__webpack_exports__","parse","StyleToObject","iterator","output","hasIterator","len","stringifyPosition","point","index","VFileMessage","Error","place","origin","parts","undefined","indexOf","message","stack","fatal","ruleId","file","actual","expected","url","note","path","basename","ext","seenNonSlash","assertPath","charCodeAt","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","code","join","segments","joined","normalize","absolute","normalizeString","allowAboveRoot","lastSlashIndex","result","lastSegmentLength","lastSlash","dots","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","href","order","VFile","is_buffer","data","messages","history","stored","map","includes","urlToPath","URL","protocol","getPathFromURLPosix","hostname","pathname","third","decodeURIComponent","assertNonEmpty","lib_assertPath","assertPart","stem","encoding","info","fail","part","bail","getPrototypeOf","toStringTag","unified","base","frozen","transformers","trough","fns","pipeline","run","values","middlewareIndex","callback","pop","next","fn","wrap","middleware","called","parameters","fnExpectsCallback","done","apply","Promise","then","use","middelware","attachers","namespace","freezeIndex","processor","assertUnfrozen","Parser","Compiler","freeze","attacher","transformer","Number","POSITIVE_INFINITY","settings","addPlugin","addList","addPreset","assign","plugins","thing","add","plugin","entry","doc","vfile","assertParser","newable","String","assertCompiler","assertNode","compile","executor","resolve","reject","tree","runSync","complete","assertDone","process","processSync","destination","own","keys","asyncName","looksLikeAVFile","emptyOptions","one","includeImageAlt","includeHtml","alt","lib_all","children","splice","list","remove","items","chunkStart","from","unshift","micromark_util_combine_extensions_hasOwnProperty","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","test","fromCharCode","factorySpace","effects","ok","max","limit","size","enter","prefix","consume","exit","tokenize","previous","contentStart","attempt","parser","constructs","contentInitial","lineStart","token","contentType","document_document","childFlow","childToken","lineStartOffset","self","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","Boolean","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","nok","document","disable","null","blankLine","after","partial","subtokenize","event","lineIndex","otherIndex","otherEvent","subevents","more","jumps","_isInFirstContentOfListItem","subcontent","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","_container","content_content","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","initializeFactory","text_text","field","text","notText","atBreak","resolveAllLineSuffixes","extraResolver","tabs","chunks","bufferIndex","chunk","_index","_bufferIndex","thematicBreak","marker","sequence","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","state","open","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","normalizeIdentifier","toLowerCase","toUpperCase","titleBefore","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","setextUnderline","paragraph","resolveTo","definition","heading","htmlBlockNames","htmlRawNames","blankLineBefore","nonLazyContinuationStart","nonLazyContinuation","codeFenced","closeStart","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","sequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","index_dom_element","createElement","decodeNamedCharacterReference","characterReference","innerHTML","char","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","defined","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","media","group","label","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","classifyCharacter","attention","attentionMarkers","before","_open","_close","openingSequence","closingSequence","nextEvents","movePoint","labelStartLink","constructs_document","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","afterWhitespace","constructs_flow","sequenceFurther","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeEnd","completeAttributeNameBefore","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationAfter","continuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","constructs_string","constructs_text","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","returnState","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","between","tailExitIndex","headEnterIndex","search","decodeNumericCharacterReference","parseInt","characterEscapeOrReference","decode","$0","$1","$2","head","hex","lib_own","fromMarkdown","atCarriageReturn","compiler","config","transforms","canContainEols","autolink","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeText","codeTextData","codeFlowValue","title","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreakEscape","hardBreak","hardBreakTrailing","htmlFlow","html","htmlFlowData","htmlText","htmlTextData","image","listItem","spread","_spread","checked","listItemValue","ancestor","listOrdered","listUnordered","reference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","depth","onexitdata","characterEscapeValue","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","lib_point","resume","codeFencedFence","lang","onexithardbreak","referenceType","getData","fragment","labelText","resource","setextHeadingLineSequence","setextHeadingText","configure","combined","extensions","extension","right","mdastExtensions","tokenStack","setData","listStack","prepareList","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","handler","defaultOnError","create","and","errorHandler","parent","onExitError","lib_toString","ordered","postprocess","combineExtensions","all","syntaxExtension","hook","maybe","left","existing","constructs_namespaceObject","createTokenizer","initialize","columnStart","resolveAllConstructs","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","serializeChunks","atTab","main","chunkIndex","sliceChunks","view","startIndex","startBufferIndex","endIndex","endBufferIndex","shift","restore","onreturn","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleConstruct","store","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","preprocess","endPosition","lastIndex","Math","ceil","remarkParse","normalizeUri","skip","encodeURIComponent","convert","castFactory","anyFactory","tests","checks","visitParents","visitor","reverse","is","step","factory","parents","visit","subresult","grandparents","concat","pointStart","unist_util_position_lib_point","pointEnd","mdast_util_definitions_lib_own","clean","footnoteReference","counter","id","safeId","footnoteOrder","footnoteCounts","reuseCounter","properties","clobberPrefix","dataFootnoteRef","ariaDescribedBy","patch","sup","applyData","revert","subtype","suffix","contents","listItemLoose","trimLine","codePointAt","handlers","blockquote","break","className","delete","footnote","footnoteById","no","dangerous","imageReference","inlineCode","linkReference","results","loose","listLoose","disabled","child","root","table","rows","firstRow","tableContent","body","tableCell","tableRow","siblings","rowIndex","align","cellIndex","cells","cell","alignValue","trimLines","last","toml","ignore","yaml","footnoteDefinition","state_own","to","hName","hChildren","hProperties","state_one","passThrough","state_all","unknownHandler","defaultUnknownHandler","nodes","state_wrap","toHast","createState","allowDangerousHtml","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","footnoteBackLabel","definitions","cache","augment","ctx","foot","footer","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","lib","Schema","normal","space","merge","normalize_normalize","Info","attribute","boolean","booleanish","overloadedBoolean","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","powers","types_boolean","increment","types_namespaceObject","DefinedInfo","mask","create_own","transform","attributes","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","html_html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","capture","charSet","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","default","defer","dir","dirName","download","draggable","encType","enterKeyHint","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inputMode","integrity","isMap","itemId","itemProp","itemRef","itemScope","itemType","loading","loop","low","manifest","maxLength","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","pattern","ping","placeholder","playsInline","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rowSpan","sandbox","scope","scoped","seamless","selected","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","tabIndex","translate","typeMustMatch","useMap","width","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","charOff","classId","clear","codeBase","codeType","color","compact","declare","face","frame","frameBorder","hSpace","leftMargin","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","operator","orient","orientation","overflow","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","property_information_html","property_information_svg","rehypeFilter","allowedElements","disallowedElements","allowElement","parent_","unwrapDisallowed","valid","dash","cap","kebab","camelcase","hastToReact","protocols","uriTransformer","uri","first","colon","ast_to_react_own","tableElements","Set","getElementsBeforeCount","count","styleReplacer","react_markdown_own","deprecated","renderers","astPlugins","escapeHtml","allowNode","allowedTypes","disallowedTypes","includeNodeIndex","ReactMarkdown","deprecation","console","warn","remarkPlugins","remarkRehypeOptions","rehypePlugins","hastNode","react","childrenToReact","childIndex","toReact","transformLinkUri","parentSchema","schema","addProperty","find","Type","rest","dashes","comma_separated_tokens_stringify","input","padRight","padLeft","parseStyle","node_modules_style_to_object","listDepth","component","components","basic","react_is","linkTarget","inline","level","transformImageUri","getInputElement","textAlign","isHeader","sourcePos","rawSourcePos","sourcePosition","includeElementIndex","siblingCount","has","whitespace","skipHtml","propTypes","prop_types"],"sourceRoot":""}